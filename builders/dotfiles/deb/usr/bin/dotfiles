#!/bin/bash
set -e
fail() { cat >&2; exit 1; }
usage() {
  fail <<EOF
usage: dotfiles [apply|configure|clone]

dotfiles apply # Deploy files from ~/projects/dotfiles to ~ with GNU stow
dotfiles configure # Generate any personal customizations, like SSH keys
dotfiles clone nox glu ... # Clone repos into ~/projects/
EOF
}

declare -A clone_from
clone_from["f/chuck"]="ccrma/chuck"
clone() {
  local target="$1"
  if [ -e "$HOME/projects/$target" ]; then
    return 0
  fi

  if [ -n "${clone_from[$target]}" ]; then
    local repo="${clone_from[$target]}"
  else
    local repo="MaddieM4/${target}"
  fi
  if stat -t $HOME/.ssh/id_* &>/dev/null; then
    local url="git@github.com:${repo}.git"
  else
    local url="https://github.com/${repo}.git"
  fi
  (set -x && cd ~/projects && git clone "$url")
}

# Make sure dotfiles repo is present
clone dotfiles

if [[ "$1" == "apply" ]]; then
   cd ~/projects/dotfiles && stow -vt "$HOME" files secrets
elif [[ "$1" == "configure" ]]; then
   cd ~/projects/dotfiles && ./configure
elif [[ "$1" == "clone" ]]; then
   shift;
   for target in "$@"; do
     clone $target
   done
elif [[ -z "$1" ]]; then
   echo "You must provide a subcommand." >&2
   usage
else
   fail <<EOF
Unknown subcommand: $1
EOF
fi
